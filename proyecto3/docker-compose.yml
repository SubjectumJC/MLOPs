
x-airflow-common:
  &airflow-common
  image: apache/airflow:2.9.0-python3.11
  environment:
    &airflow-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    AIRFLOW__CELERY__WORKER_CONCURRENCY: 4
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    _PIP_ADDITIONAL_REQUIREMENTS: >-
      mlflow psycopg2-binary pandas scikit-learn boto3 sqlalchemy requests
      great_expectations fsspec[s3] pyarrow
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:15
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - pgdata:/var/lib/postgresql/data

  airflow-webserver:
    <<: *airflow-common
    command: >
      bash -c "
      airflow db migrate &&
      airflow users create --username admin --password admin --firstname admin --lastname user --role Admin --email admin@example.com ||
      true &&
      exec airflow webserver
      "
    ports:
      - "8080:8080"

  airflow-scheduler:
    <<: *airflow-common
    command: airflow scheduler
    ports: []

  mlflow:
    image: bitnami/mlflow:2.22.0
    environment:
      BACKEND_STORE_URI: ${BACKEND_STORE_URI}
      ARTIFACT_ROOT: ${ARTIFACT_ROOT}
      MLFLOW_TRACKING_URI: ${BACKEND_STORE_URI}
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
    command: mlflow server --backend-store-uri ${BACKEND_STORE_URI} --default-artifact-root ${ARTIFACT_ROOT} --host 0.0.0.0
    ports:
      - "5000:5000"
    depends_on:
      - minio
      - postgres

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana

  training-worker:
    build:
      context: ./training-worker
      dockerfile: Dockerfile
    volumes:
      - ./data:/data

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - mlflow

  streamlit:
    build:
      context: ./streamlit
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    depends_on:
      - mlflow

volumes:
  pgdata:
  minio_data:
  grafana_data: