# docker-compose.yml â€“ versiÃ³n corregida para tu estructura de carpetas

# ðŸ‘‡ NOTA: no declares "version:"; ComposeÂ v2 la ignora.
# Cada build usa el mismo contexto (raÃ­z del repo) y un Dockerfile
# dentro de la carpetaÂ docker/ que ya existe en tu proyecto.

services:
  # ---------------- STORAGE ----------------
  minio:
    image: quay.io/minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      retries: 3

  # ---------------- METADATA DB ----------------
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_METADATA}
    volumes:
      - pg_metadata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      retries: 5

  postgres-raw:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_RAW}
    volumes:
      - pg_raw:/var/lib/postgresql/data

  postgres-clean:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_CLEAN}
    volumes:
      - pg_clean:/var/lib/postgresql/data

  # ---------------- MLFLOW ----------------
  mlflow:
    image: bitnami/mlflow:${MLFLOW_VERSION}
    environment:
      MLFLOW_SERVER_DEFAULT_ARTIFACT_ROOT: s3://${MLFLOW_S3_BUCKET}
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      BACKEND_STORE_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT_METADATA}/${POSTGRES_DB_METADATA}
    ports:
      - "5000:5000"
    depends_on:
      - minio
      - postgres

  # ---------------- AIRFLOW ----------------
  airflow:
    image: apache/airflow:2.9.1-python3.11
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-raw:5432/${POSTGRES_DB_RAW}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    ports:
      - "8080:8080"
    depends_on:
      - postgres-raw
      - postgres-clean
      - mlflow

  # ---------------- TRAINING JOB IMAGE ----------------
  training:
    build:
      context: .
      dockerfile: docker/Dockerfile.training
    depends_on:
      - mlflow
      - postgres-clean

  # ---------------- FASTAPI (API de inferencia) ----------------
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - MODEL_STAGE=${MODEL_STAGE}
    depends_on:
      - mlflow
      - postgres-clean
    ports:
      - "8000:8000"

  # ---------------- STREAMLIT UI ----------------
  ui:
    build:
      context: .
      dockerfile: docker/Dockerfile.ui
    depends_on:
      - api
    ports:
      - "8501:8501"

volumes:
  minio_data:
  pg_metadata:
  pg_raw:
  pg_clean: